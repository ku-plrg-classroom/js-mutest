import {
  scriptName,
  header,
  log,
  err,
  warn,
  getArgs,
  readFile,
  writeFile,
  readJSON,
  inputValidCheck,
  Test,
} from './helper';

import fs from 'fs';

import yargs from 'yargs';

import {
  Mutator,
} from './impl';

import {
  MutationTester,
  MutationScore,
} from './tester';

// Generate mutants for the target JS file
const mutate = (argv: any): void => {
  const [ targetPath ] = getArgs('mutate', argv, 1);
  const { detail } = argv;

  if (detail) log('Generating mutants for the target JS file...');

  // Read the target JS file and parse it
  const code = readFile(targetPath);
  if (detail) log(`The target file is \`${targetPath}\`.`);

  // Generate mutants
  const mutator: Mutator = new Mutator(code, detail);

  for (const mutant of mutator.mutants) {
    console.log(mutant.toString());
  }
}

// Perform mutation testing
const test = (argv: any): void => {
  const [ targetPath, inputPath ] = getArgs('test', argv, 2);
  const { detail } = argv;

  if (detail) log('Perform mutation testing with the target JS file...');

  // Read the target JS file and parse it
  const code = readFile(targetPath);
  if (detail) log(`The target file is \`${targetPath}\`.`);

  // Read the input JSON file
  const inputs: any[][] = readJSON(inputPath);
  inputValidCheck(inputs);
  if (detail) log(`The input file is \`${inputPath}\`.`);

  // Generate multiple mutants and run them with the tests generated by the inputs
  // to check whether each mutant is killed or alive by the tests
  const tester: MutationTester = new MutationTester(code, detail);
  const score: MutationScore = tester.run(inputs);

  // Print the mutation score
  console.log(`Mutation score: ${score}`);
}

// Parse the command-line arguments
try {
  yargs(process.argv.slice(2))
    .scriptName(scriptName)
    .usage('Usage: $0 <command> [options]')
    .command('mutate', 'Generate mutants for the target JS file', () => {}, mutate)
    .example('$0 mutate target.js', 'Generate mutants for the target JS file')
    .command('test', 'Perform mutation testing', () => {}, test)
    .example('$0 test target.js input.json', 'Perform mutation testing')
    .option('detail', {
      type: 'boolean',
      description: 'Show detailed process',
    })
    .demandCommand(1, `You need a command to run \`${scriptName}.\``)
    .parse();
} catch (e) {
  if (typeof e === 'string') {
    console.error(e);
  } else {
    throw e;
  }
}
